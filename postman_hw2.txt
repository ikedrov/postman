http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});



pm.test("Body is correct", function () {
    pm.response.to.have.body("This is the first responce from server!");
});


http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Проверить, что name в ответе равно name s request (name вбить руками.)
5. Проверить, что age в ответе равно age s request (age вбить руками.)
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
7. Спарсить request.
8. Проверить, что name в ответе равно name s request (name забрать из request.)
9. Проверить, что age в ответе равно age s request (age забрать из request.)
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
11. Вывести в консоль параметр family из response.
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

let jsonData = pm.response.json();

pm.test("Name", function () {
    pm.expect(jsonData.name).to.eql("Ivan");
});

pm.test("Age", function () {
    pm.expect(jsonData.age).to.eql("36");
});

pm.test("Salary", function () {
    pm.expect(jsonData.salary).to.eql(5000);
});

let req = request.data

pm.test("Body_name", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});

pm.test("Body_age", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});

pm.test("Body_salary", function () {
    pm.expect(jsonData.salary).to.eql(+req.salary);
});

console.log(jsonData.family)

pm.test("u_salary_1_5_year ", function () {
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4);
});

http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age s request (age забрать из request.)
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
8. Вывести в консоль параметр family из response.
9. Проверить, что у параметра dog есть параметры name.
10. Проверить, что у параметра dog есть параметры age.
11. Проверить, что параметр name имеет значение Luky.
12. Проверить, что параметр age имеет значение 4.

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

let jsonData = pm.response.json();
let req = pm.request.url.query.toObject();

pm.test("Name", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});
pm.test("Age", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});
pm.test("Salary", function () {
    pm.expect(jsonData.salary).to.eql(+req.salary);
});

console.log(jsonData.family);

pm.test('Dog name', function() {
  pm.expect(jsonData.family.pets.dog).to.have.property('name');
});

pm.test('Dog age', function() {
  pm.expect(jsonData.family.pets.dog).to.have.property('age');
});

pm.test('Dog name Luky', function() {
  pm.expect(jsonData.family.pets.dog.name).to.be.oneOf(['Luky']);
});

pm.test('Dog age 4', function() {
  pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4]);
});

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. Вывести в консоль параметр salary из request.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.


pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

let jsonData = pm.response.json();
let req = pm.request.url.query.toObject();

pm.test("Name", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});
pm.test("Age", function () {
    pm.expect(jsonData.age).to.eql(+req.age);
});

console.log(req.salary)
console.log(jsonData.salary)

console.log(jsonData.salary[0])
console.log(jsonData.salary[1])
console.log(jsonData.salary[2])

pm.test("Salary_0", function () {
    pm.expect(jsonData.salary[0]).to.eql(+req.salary);
});
pm.test("Salary_1", function () {
    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);
});
pm.test("Salary_2", function () {
    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);
});

pm.environment.set("name", jsonData.name);
pm.environment.set("age", jsonData.age);
pm.environment.set("salary", jsonData.salary[0]);

for (i = 0; i < jsonData.salary.length; i++) {
    console.log(jsonData.salary[i]);
}


http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.
8. Проверить, что json response имеет параметр start_qa_salary
9. Проверить, что json response имеет параметр qa_salary_after_6_months
10. Проверить, что json response имеет параметр qa_salary_after_12_months
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
13. Проверить, что json response имеет параметр person
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

let jsonData = pm.response.json();
let req = request.data;
let reqName = request.data.name;
let reqAge = request.data.age;
let reqSalary = request.data.salary;

pm.test("start_qa_salary", function () {
    pm.expect(jsonData).to.have.property("start_qa_salary");
});
pm.test("qa_salary_after_6_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_6_months");
});
pm.test("qa_salary_after_12_months", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_12_months");
});
pm.test("qa_salary_after_1.5_year", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year");
});
pm.test("qa_salary_after_3.5_years", function () {
    pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years");
});

pm.test("person", function () {
    pm.expect(jsonData).to.have.property("person");
});

pm.test("start_qa_salary == salary", function () {
    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);
});
pm.test("qa_salary_after_6_months == salary", function () {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);
});
pm.test("qa_salary_after_12_months == salary*2.7", function () {
    pm.expect(jsonData.qa_salary_after_12_months ).to.eql(req.salary*2.7);
});
pm.test("qa_salary_after_1.5_year == salary*3.3", function() {
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(req.salary*3.3);
});
pm.test("qa_salary_after_3.5_years == salary*3.8", function () {
    pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(req.salary*3.8);
});

pm.test("u_name == salary", function () {
    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);
});

pm.test("u_age == age", function () {
    pm.expect(jsonData.person.u_age).to.eql(+req.age);
});

pm.test("u_salary_5_years == salary*4.2", function () {
    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);
});

for (i in jsonData.person) {
    console.log(i, jsonData.person[i])
}
