ДЗ_3 Postman
=====

1) необходимо залогиниться
POST
http://162.55.220.72:5005/login
login : str (кроме /)
password : str

Приходящий токен необходимо передать во все остальные запросы.

===================
дальше все запросы требуют наличие токена.
===================

2) http://162.55.220.72:5005/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user


pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

const schema = {
    
	"definitions": {},
	"$schema": "http://json-schema.org/draft-07/schema#", 
	"$id": "https://example.com/object1682450504.json", 
	"title": "Root", 
	"type": "object",
	"required": [
		"person",
		"qa_salary_after_12_months",
		"qa_salary_after_6_months",
		"start_qa_salary"
	],
	"properties": {
		"person": {
			"$id": "#root/person", 
			"title": "Person", 
			"type": "object",
			"required": [
				"u_age",
				"u_name",
				"u_salary_1_5_year"
			],
			"properties": {
				"u_age": {
					"$id": "#root/person/u_age", 
					"title": "U_age", 
					"type": "integer",
					"examples": [
						36
					],
					"default": 0
				},
				"u_name": {
					"$id": "#root/person/u_name", 
					"title": "U_name", 
					"type": "array",
					"default": []
				},
				"u_salary_1_5_year": {
					"$id": "#root/person/u_salary_1_5_year", 
					"title": "U_salary_1_5_year", 
					"type": "integer",
					"examples": [
						4000
					],
					"default": 0
				}
			}
		}
,
		"qa_salary_after_12_months": {
			"$id": "#root/qa_salary_after_12_months", 
			"title": "Qa_salary_after_12_months", 
			"type": "integer",
			"examples": [
				2900
			],
			"default": 0
		},
		"qa_salary_after_6_months": {
			"$id": "#root/qa_salary_after_6_months", 
			"title": "Qa_salary_after_6_months", 
			"type": "integer",
			"examples": [
				2000
			],
			"default": 0
		},
		"start_qa_salary": {
			"$id": "#root/start_qa_salary", 
			"title": "Start_qa_salary", 
			"type": "integer",
			"examples": [
				1000
			],
			"default": 0
		}
	}
}

pm.test("Validating.schema",()=>{
pm.response.to.have.jsonSchema(schema);
});

let jsonData = pm.response.json();
let req = JSON.parse(request.data);

pm.test("qa_salary_after_12_months", function () {
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.9);
});
pm.test("qa_salary_after_6_months", function () {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);
});
pm.test("qa_salary_after_6_months", function () {
    pm.expect(jsonData.start_qa_salary).to.eql(req.salary);
});
pm.test("qa_salary_after_6_months", function () {
    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(req.salary*4);
});

var salary_1_5_year = jsonData.person.u_salary_1_5_year;
console.log(salary_1_5_year);
===================

3) http://162.55.220.72:5005/new_data
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
4) проверить, что 2-й элемент массива salary больше 1-го и 0-го

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

const schema = {
	"definitions": {},
	"$schema": "http://json-schema.org/draft-07/schema#", 
	"$id": "https://example.com/object1682535102.json", 
	"title": "Root", 
	"type": "object",
	"required": [
		"age",
		"name",
		"salary"
	],
	"properties": {
		"age": {
			"$id": "#root/age", 
			"title": "Age", 
			"type": "integer",
			"examples": [
				36
			],
			"default": 0
		},
		"name": {
			"$id": "#root/name", 
			"title": "Name", 
			"type": "string",
			"default": "",
			"examples": [
				"Ivan"
			],
			"pattern": "^.*$"
		},
		"salary": {
			"$id": "#root/salary", 
			"title": "Salary", 
			"type": "array",
			"default": []
		}
	}
};
pm.test("Validating.schema",()=>{
pm.response.to.have.jsonSchema(schema);
});

let jsonData = pm.response.json();
let req = request.data;

pm.test("qa_salary_0", function () {
    pm.expect(jsonData.salary[0]).to.eql(+req.salary);
});
pm.test("qa_salary_1", function () {
    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2);
});
pm.test("qa_salary_2", function () {
    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3);
});

console.log(jsonData.salary[0] < +jsonData.salary[1] < +jsonData.salary[2])
===================

4) http://162.55.220.72:5005/test_pet_info
req.
POST
age: int
weight: int
name: str
auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

const schema = {
	"definitions": {},
	"$schema": "http://json-schema.org/draft-07/schema#", 
	"$id": "https://example.com/object1682536122.json", 
	"title": "Root", 
	"type": "object",
	"required": [
		"age",
		"daily_food",
		"daily_sleep",
		"name"
	],
	"properties": {
		"age": {
			"$id": "#root/age", 
			"title": "Age", 
			"type": "integer",
			"examples": [
				36
			],
			"default": 0
		},
		"daily_food": {
			"$id": "#root/daily_food", 
			"title": "Daily_food", 
			"type": "number",
			"examples": [
				1.2
			],
			"default": 0.0
		},
		"daily_sleep": {
			"$id": "#root/daily_sleep", 
			"title": "Daily_sleep", 
			"type": "integer",
			"examples": [
				250
			],
			"default": 0
		},
		"name": {
			"$id": "#root/name", 
			"title": "Name", 
			"type": "string",
			"default": "",
			"examples": [
				"Ivan"
			],
			"pattern": "^.*$"
		}
	}
};
pm.test("Validating.schema",()=>{
pm.response.to.have.jsonSchema(schema);
});

let jsonData = pm.response.json();
let req = request.data;

pm.test("daily_food", function () {
    pm.expect(jsonData.daily_food).to.eql(req.weight*0.012);
});
pm.test("daily_sleep", function () {
    pm.expect(jsonData.daily_sleep).to.eql(req.weight*2.5);
});
===================

5) http://162.55.220.72:5005/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) Проверить что занчение поля name = значению переменной name из окружения
4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

const schema = {
	"definitions": {},
	"$schema": "http://json-schema.org/draft-07/schema#", 
	"$id": "https://example.com/object1682538727.json", 
	"title": "Root", 
	"type": "object",
	"required": [
		"age",
		"family",
		"name",
		"salary"
	],
	"properties": {
		"age": {
			"$id": "#root/age", 
			"title": "Age", 
			"type": "string",
			"default": "",
			"examples": [
				"36"
			],
			"pattern": "^.*$"
		},
		"family": {
			"$id": "#root/family", 
			"title": "Family", 
			"type": "object",
			"required": [
				"children",
				"u_salary_1_5_year"
			],
			"properties": {
				"children": {
					"$id": "#root/family/children", 
					"title": "Children", 
					"type": "array",
					"default": [],
					"items":{
						"$id": "#root/family/children/items", 
						"title": "Items", 
						"type": "array",
						"default": []
					}
				},
				"u_salary_1_5_year": {
					"$id": "#root/family/u_salary_1_5_year", 
					"title": "U_salary_1_5_year", 
					"type": "integer",
					"examples": [
						16000
					],
					"default": 0
				}
			}
		}
,
		"name": {
			"$id": "#root/name", 
			"title": "Name", 
			"type": "string",
			"default": "",
			"examples": [
				"Ivan"
			],
			"pattern": "^.*$"
		},
		"salary": {
			"$id": "#root/salary", 
			"title": "Salary", 
			"type": "integer",
			"examples": [
				4000
			],
			"default": 0
		}
	}
};
pm.test("Validating.schema",()=>{
pm.response.to.have.jsonSchema(schema);
});

let jsonData = pm.response.json();
let req = request.data;

pm.test("Check name", function () {
    pm.expect(jsonData.name).to.eql(pm.environment.get("name"));
});
pm.test("Check age", function () {
    pm.expect(jsonData.age).to.eql(req.age);
});

===================

6) http://162.55.220.72:5005/currency
req.
POST
auth_token

Resp. Передаётся список массив объектов.
[
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
…
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
]

Тесты:
1) Можете взять любой объект из присланного списка, используйте js random.
В объекте возьмите Cur_ID и передать через окружение в следующий запрос.


let jsonData = pm.response.json();
let number = Math.floor(Math.random() * (5 - 1) + 1)
let cur_resp = jsonData[number]
let cur = cur_resp.Cur_ID
console.log(cur)
pm.environment.set("Cur_ID", cur)
 ===================

7) http://162.55.220.72:5005/curr_byn
req.
POST
auth_token
curr_code: int

Resp.
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.


===============
***
1) получить список валют
2) итерировать список валют
3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты
4) если возвращается 500 код, переходим к следующей итреации
5) если получаем 200 код, проверяем response json на наличие поля "Cur_OfficialRate"
6) если поле есть, пишем в консоль инфу про фалюту в виде response
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}
7) переходим к следующей итерации

var jsonData = pm.response.json();
var respData = request.data;
console.log(jsonData);
console.log(respData);

for (i of jsonData){
    pm.sendRequest ({
        url: "http://54.157.99.22:80/curr_byn",
        method: "POST",
        body: {
            mode: "formdata",
            formdata: [
                {key: 'auth_token', value: pm.environment.get("token")},
                {key: 'curr_code', value: i.Cur_ID}
            ]
        }

    });
function currency(curr, code) {
        if (response.code === 500){
            console.log("Response code 500")
            return;
        }
        else if (response.code === 200){
            if (Object.hasOwn(respData, "Cur_OfficialRate")){
                console.log(respData)
                var result = {
                    "Cur_Abbreviation": respData.Cur_Abbreviation,
                    "Cur_ID": respData.Cur_ID,
                    "Cur_Name": respData.Cur_Name,
                    "Cur_OfficialRate": respData.Cur_OfficialRate,
                    "Cur_Scale": respData.Cur_Scale,
                    "Date": respData.Date
                }
                console.log(result)
            }
        }
    }
};





